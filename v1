# shellcheck shell=sh disable=SC2039,SC2142,SC3043

# author:       Li Junhao           l@x-cmd.com    edwinjhlee.github.io
# maintainer:   Li Junhao

# In what scope?

# shellcheck disable=SC2139
# param(){
#     local name="${1:-Please provide name}"
#     alias "${name}_param=_param_def"
#     alias "${name}_param_type=\"O=${name} param_type\""
# }

xrc dict
xrc dict/_v0/str # TODO BUG: fix dist bug in bash5

# TODO: We may need to set IFS.
alias param='local IFS=; { eval "$(_param_main "$@")"; }'
# alias param=cat

# Handle param marg
param_marg(){
    local a=${1:?Provide argument name}
    if [ -n "$2" ]; then
        param_marg_get "$@"
    else
        param_marg_seq "$@"
    fi
}

param_marg_get(){
    local a=${1:?Provide argument name}
    local n=${2:?Provide argument name}
    if [ -z "$3" ]; then
        eval "echo \"\$${a}_${n}\""
    else
        eval "echo \"\$${a}_${n}_${3}\""
    fi
}

param_marg_len(){
    local a=${1:?Provide argument name}
    eval "echo \"\$${a}_n\""
}

param_marg_seq(){
    local a=${1:?Provide argument name}
    seq "$(param_marg_len "$a")"
}

# PARAM_AWK_PATH="$(xrc which param/v1.awk)"
PARAM_AWK_PATH="./v1.awk"
PARAM_DEFAULT_VAR_PREFIX=___X_CMD_X_BASH_PARAM_DEFAULT___
PARAM_TYPE_VAR_PREFIX=___X_CMD_X_BASH_PARAM_TYPE___

# DICT_KEYS_SEP conflict. But it is OK.
PARAM_ARG_SEP="$(printf "\005")"          # ARG_SEP in awk script
# PARAM_ARG_SEP="$(printf "\n")"          # ARG_SEP in awk script
# PARAM_RS_SEP
PARAM_RS_SEP="${DICT_SEP}"

# param_type    gitee     repo
# param_type    gitee     user    =~  [A-Za-z0-9_]+
# param_type    gitee     access  =   private         public          inner-public

param_type_unset(){
    local app_name="${1:?Provide app name}"; 
    local varname="${PARAM_TYPE_VAR_PREFIX}${app_name}"
    eval "$varname="
}

param_type(){
    local app_name="${1:?Provide app name}";        shift
    local result="$*"
    local varname="${PARAM_TYPE_VAR_PREFIX}${app_name}"
    eval "$varname=\"\${$varname}\${PARAM_ARG_SEP}\${result}\""
    # eval echo "fuck: \"\$$varname\""
}

param_type_print(){
    local app_name="${1:?Provide app name}"
    local varname="${PARAM_TYPE_VAR_PREFIX}${app_name}"
    eval echo "\"\$$varname\""
}

param_type_pprint(){
    param_type_print "$@" | tr "$PARAM_ARG_SEP" "\n"
}

# param_default put gitee/$O repo x-bash
# param_default put gitee/$O user edwinjhlee
# param_default put gitee/$O access public
param_default() {
    local op="$1"
    local app_name=${2:?Provide Object}

    local object_name=${app_name#*/}
    if [ "$object_name" = "$app_name" ]; then
        object_name=
    fi
    app_name=${app_name%%/*}


    local O="${PARAM_DEFAULT_VAR_PREFIX}${app_name}"

    shift 2

    case "$op" in # yml seemed to be a better
        load)       dict_load_json "${1:?Provide path in function param_default}" ;;
        dump)       if [ -n "$object_name" ]; then
                        dict_scope "${object_name}" | dict_pjson
                    else
                        dict_json
                    fi ;;
        dump_raw)   if [ -n "$object_name" ]; then
                        dict_scope "${object_name}" | dict_dump
                    else
                        dict_dump
                    fi ;;
        clear)      eval "$O=" ;;
        get)        dict_get ${object_name:+"${object_name}"} "${1:?Provide [key] name in function 'param_default get'}" ;;
        put | set)  dict_put ${object_name:+"${object_name}"} "${1:?Provide key name in function param_default}" "${2:?Provide [value] in function 'param_default put'}" ;;
        export)     export "${O?}" ;;
        *)
                    cat >&2 <<A
param_default     param default function

Subcommand:
        load        load the param default from /dev/stdin in json form
        dump        dump the param default to /dev/stdout in json form
        clear       unset the default param
        get         Upgrade xrc from 'https://get.x-cmd.com/script'
        put,set     param_default put <key> <value>
        export      export the default param variable
A
        ;;
    esac
}

################################################

_param_get_scope(){
    awk '{
        if ($1 == "scope:") {
            if ($2 == "") {
                getline
                print $1
                exit 1
            } else {
                print $2
            }
        }
    }'
}

_param_main() {
    {
        local src
        src="$(cat)"
        local scope
        scope="$(echo "$src" | _param_get_scope)"

        # line 1: global types
        param_type_print "${scope%%/*}"
        printf "%s" "$PARAM_RS_SEP"

        # line 2: config lines
        printf "%s" "$src"
        printf "%s" "$PARAM_RS_SEP"
        
        # line 3: running argument lines
        local IFS
        IFS="$PARAM_ARG_SEP"          # ARG_SEP in awk script
        printf "%s" "$*"
        printf "%s" "$PARAM_RS_SEP"

        # line 4: default dict
        param_default dump_raw "$scope"
        # printf "%s" "$PARAM_RS_SEP"
    } | awk \
            -v ARG_SEP="$PARAM_ARG_SEP" \
            -v RS="$PARAM_RS_SEP" \
            -f "$PARAM_AWK_PATH"
}


# for idx in $(param_marg scope); do
#     param_marg scope "$idx" 1
# done